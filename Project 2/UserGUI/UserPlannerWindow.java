/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserGUI;

import Exceptions.CannotAddCourseException;
import Database.DBStudent;
import Database.MyConnection;
import UserClasses.Student;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.util.Collections;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author Ajai Gill
 */
public class UserPlannerWindow extends javax.swing.JFrame {

    
    private DefaultListModel model2;
    private DefaultListModel model;
    private static Student student;
    private static MyConnection c;
    private static JFrame login;
    /**
     * Creates new form MainPlannerWindow
     */
    public UserPlannerWindow(Student stud, MyConnection c, JFrame login) {
        initComponents();
        student = stud;
        this.c = c;
        this.login = login;
        
        model = new DefaultListModel();
        jList1.setModel(model);
        model2 = new DefaultListModel();
        jList2.setModel(model2);
        UpdateLists();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jList1 = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        jList2 = new javax.swing.JList<>();
        jButton1 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jComboBox2 = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setResizable(false);

        jList1.setDragEnabled(true);
        jList1.setDropMode(javax.swing.DropMode.INSERT);
        jScrollPane2.setViewportView(jList1);

        jList2.setDropMode(javax.swing.DropMode.INSERT);
        jScrollPane3.setViewportView(jList2);

        jButton1.setText("Transfer -->");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel1.setText("Plan");

        jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "To Do...", "Add Course To Plan", "Delete Course From Plan", "Edit Mark In Transcript", "Delete Course From Transcript" }));
        jComboBox2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox2ActionPerformed(evt);
            }
        });

        jLabel2.setText("Transcript");

        jMenu1.setText("Account");

        jMenuItem1.setText("Logout");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Analyse");

        jMenuItem2.setText("Analysis Of Student Progress");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuItem3.setText("Prerequisites Of Required Courses");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuItem4.setText("Prerequisites Based On Plan");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem4);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 289, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(271, 271, 271)
                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(80, 267, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 253, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jButton1)
                                .addGap(119, 119, 119)))))
                .addGap(20, 20, 20)
                .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(40, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void UpdateLists()
    {
        model.removeAllElements();
        model2.removeAllElements();
        for(int i = 0; i < student.getPlannedCourseList().size(); i++)
        {
            model2.addElement(student.getPlannedCourseList().get(i).PlanPrint());
            System.out.println(student.getPlannedCourseList().get(i).getCourseAttempted().getCourseCode());
        }
        
        for(int i = 0; i < student.getTranscriptCourseList().size(); i++)
        {
            model.addElement(student.getTranscriptCourseList().get(i).TranscriptPrint());
        }
    }
    
    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        switch(jComboBox2.getSelectedIndex())
        {
            case 1:
                new UserAddCourseToPlan(student, this, c).setVisible(true);
                break;
            case 2:
                if(jList2.getSelectedIndex() != -1)
                {
                    student.getPlannedCourseList().remove(jList2.getSelectedIndex());
                    UpdateLists();
                }
                else
                {
                    JOptionPane.showMessageDialog(this, "You haven't selected a course to delete");
                }
                break;
            case 3:
                if(jList1.getSelectedIndex() != -1)
                {
                    new UserEditMark(student.getTranscriptCourseList().get(jList1.getSelectedIndex()), student, this).setVisible(true);
                }
                else
                {
                    JOptionPane.showMessageDialog(this, "Please select a course to edit in that transcript");
                }
                break;
            case 4:
                if(jList1.getSelectedIndex() != -1)
                {
                    student.getTranscriptCourseList().remove(jList1.getSelectedIndex());
                    UpdateLists();
                }
                else
                {
                    JOptionPane.showMessageDialog(this, "You haven't selected a course to delete");
                }
                break;
        }
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
       if(jList2.getSelectedIndex() != -1)
       {
           for(int i = 0; i < model.getSize(); i++)
           {
               if(jList2.getSelectedValue().split("-", -1)[2].compareTo(((String)model.getElementAt(i)).split("-", -1)[3]) < 0)
               {
                   try
                   {
                       student.transferToTranscript(student.getPlannedCourseList().get(jList2.getSelectedIndex()));
                   }
                   catch(CannotAddCourseException e)
                   {
                       JOptionPane.showMessageDialog(this, "Cannot add that course!\nYou may not have the prerequisites!");
                   }
                   break;
               }
               else if(i == model.getSize() - 1)
               {
                   try
                   {
                       student.transferToTranscript(student.getPlannedCourseList().get(jList2.getSelectedIndex()));
                   }
                   catch(CannotAddCourseException e)
                   {
                       JOptionPane.showMessageDialog(this, "Cannot add that course!\nYou may not have the prerequisites!");
                   }
                   
                   break;
               }
           }
           
           if(model.getSize() == 0)
           {
               try
               {
                   student.transferToTranscript(student.getPlannedCourseList().get(0));
               }
               catch(CannotAddCourseException e)
               {
                   JOptionPane.showMessageDialog(this, "Cannot add that course!\nYou may not have the prerequisites!");
               }
           }
           
           Collections.sort(student.getTranscriptCourseList());
           UpdateLists();
       }
       else
       {
           JOptionPane.showMessageDialog(this, "You haven't selected a item to transfer!");
       }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        DBStudent dbs = new DBStudent(String.valueOf(student.getStudentNumber()), student.getFullName(), student.savePlanAndTranscript());
        dbs.setDegree(student.getDegreeProgramName());
        c.deleteSavedStudent(String.valueOf(student.getStudentNumber()), student.getFirstName());
        c.saveStudent(dbs);
        login.setVisible(true);
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        this.dispatchEvent(new WindowEvent(this, WindowEvent.WINDOW_CLOSING));
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        new UserAnalysis(student).setVisible(true);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        new UserPrereqsForDegree(student.getDegreeProgram()).setVisible(true);
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        new UserPrereqBasedOnPlan(student).setVisible(true);
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserPlannerWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserPlannerWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserPlannerWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserPlannerWindow.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new UserPlannerWindow(student, c, login).setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JList<String> jList1;
    private javax.swing.JList<String> jList2;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    // End of variables declaration//GEN-END:variables

}
